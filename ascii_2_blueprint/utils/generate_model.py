from itertools import product

def generate_braille(braille_list):
    if len(braille_list) != 8 or any(b not in [0, 1] for b in braille_list):
        raise ValueError("Input must be a list of 8 binary values (0 or 1)")
    positions = [0x01, 0x02, 0x04, 0x40, 0x08, 0x10, 0x20, 0x80]
    code_point = 0x2800 + sum(bit * pos for bit, pos in zip(braille_list, positions))
    return chr(code_point)

def generate_vector2(braille_list):
    vectors = []
    col = 0
    row = 0
    for n in braille_list[:4]:
        if not n:
            vectors.append("None")
            continue
        vectors.append(f"Vector2({col},{n})")
        col += 1
    for n in braille_list[4:]:
        if not n:
            vectors.append("None")
            continue
        vectors.append(f"Vector2({n},{row})")
        row += 1
    return f"[{', '.join(vectors)}]"

def generate_all_braille_combinations():
    all_combinations = list(product([0, 1], repeat=8))
    braille_characters = [generate_braille(combination) for combination in all_combinations][1:]
    vector_2 = [generate_vector2(combination) for combination in all_combinations][1:]
    return zip(braille_characters, vector_2)

if __name__ == "__main__":
    assert generate_braille([0, 0, 0, 0, 0, 0, 0, 0]) == "⠀" # (blank Braille)
    assert generate_braille([1, 1, 1, 1, 1, 1, 1, 1]) == "⣿"
    assert generate_braille([1, 0, 0, 0, 0, 0, 0, 0]) == "⠁"
    assert generate_braille([0, 0, 0, 0, 1, 0, 0, 0]) == "⠈"
    assert generate_braille([0, 1, 0, 0, 0, 0, 0, 0]) == "⠂"
    assert generate_braille([0, 0, 0, 0, 0, 1, 0, 0]) == "⠐"

    braille_chars = generate_all_braille_combinations()
    model = f"# WARNING: DO NOT MODIFY!\n# This file was auto-generated by '{__file__.split('\\')[-1].split("/")[-1]}'\n\nfrom .vector2 import Vector2\n\nbraille_charmap = {{\n"
    for char, vectors in braille_chars:
        model += f"\t\"{char}\": {vectors},\n"
    model += "}"
    with open("./model.py", "w", encoding="utf-8") as f:
        f.write(model)